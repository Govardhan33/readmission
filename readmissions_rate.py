# -*- coding: utf-8 -*-
"""Readmissions_Rate

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XMsdAmpURIOXRlLg0Ij1q4WSxz0Al-4_
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score

# Load the dataset
data = pd.read_csv('patients_data.csv')

# Check the columns in the DataFrame
print("Columns in the dataset:", data.columns)

# Convert 'Readmission' from 'Yes'/'No' to 1/0
data['Readmission'] = data['Readmission'].apply(lambda x: 1 if x.lower() == 'yes' else 0)

# Explore the data
print(data.head())
print(data.info())
print(data.describe())

# Handle missing values
data.dropna(inplace=True)

# One-hot encode categorical variables
data = pd.get_dummies(data, columns=['Gender', 'Condition', 'Procedure'], drop_first=True)

# Standardize numerical features
scaler = StandardScaler()
num_features = ['Age', 'Cost', 'Length_of_Stay', 'Satisfaction']
data[num_features] = scaler.fit_transform(data[num_features])

# Define features and target variable
X = data.drop(['Readmission', 'Outcome'], axis=1)  # Exclude 'Outcome' as it's not used for prediction
y = data['Readmission']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize Random Forest model
rf = RandomForestClassifier(random_state=42)

# Train the model
rf.fit(X_train, y_train)

# Predictions and Evaluation
rf_pred = rf.predict(X_test)
print("Random Forest Classifier Results:")
print(confusion_matrix(y_test, rf_pred))
print(classification_report(y_test, rf_pred))
print("Accuracy:", accuracy_score(y_test, rf_pred))

# Analyze readmissions by condition
data['predicted_readmission'] = rf.predict(X)  # Predict on entire dataset for condition analysis
readmitted_data = data[data['predicted_readmission'] == 1]  # Filter readmitted predictions

# Get the one-hot encoded condition columns
condition_columns = [col for col in readmitted_data.columns if col.startswith('Condition_')]

# Find the two most common conditions among readmitted patients
top_conditions = readmitted_data[condition_columns].sum().sort_values(ascending=False).head(2)
print("\nTop 2 conditions among readmitted patients:")
print(top_conditions)